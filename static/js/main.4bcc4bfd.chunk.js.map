{"version":3,"sources":["Components/OptionCard.js","Pages/OptionDisplay.js","Components/Button.js","Pages/Categories.js","Components/PlaceCard.js","RestaurantDisplay.js","Pages/About.js","Pages/RestaurantForm.js","Home.js","Team/Photos/DV.jpeg","Team/Photos/TF.jpg","Team/Photos/TR.jpg","Team/Photos/MS.jpg","Team/TeamPage.js","apiConfig.js","App.js","reportWebVitals.js","index.js"],"names":["OptionCard","props","CuisineItems","value","cuisines","name","split","map","cuisineItem","class","className","zipcode","OptionDisplay","useState","options","setOptions","GenerateOptions","myOptions","populateOptions","items","randomElement","currentRestaurants","Math","floor","random","length","indexOf","push","pop","useEffect","restaurantOptionMap","onClick","Button","reveal","opposite","when","duration","e","triggerRemove","target","innerHTML","replace","context","Categories","display","setDisplay","categories","setCategories","myArray","generateCategories","arr","i","splice","removeItemFromArray","myCategories","item","index","getRestaurants","to","restaurantQuery","queriedRestaurants","forEach","targetCuisine","targetCuisineItem","queryResults","restaurantData","restaurant","cuisineList","_id","queryRestaurants","id","Id","getRestaurantById","console","log","setCurrentRestaurants","parseString","string","PlaceCard","updating","setUpdating","info","setInfo","setCuisines","update","finalizeUpdate","a","preventDefault","infoNew","handleUpdate","putRestaurant","handleEdit","copy","Object","assign","onSubmit","onChange","type","placeholder","handleDelete","RestaurantDisplay","event","selectedRestaurant","parentNode","children","deleteRestaurant","restaurantMap","About","setRestaurantData","RestaurantForm","place","setPlace","handleChange","postRestaurant","Home","TeamPage","src","TF","alt","MS","DV","TR","apiUrls","apiUrl","window","location","hostname","foundDuplicate","Arr","InitialItem","App","fetch","method","then","res","json","data","headers","body","JSON","stringify","response","path","element","exact","mergedCuisines","finalizedCuisineArray","cuisineItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bcc4bfd.chunk.js","sourcesContent":["\n// Functions\nconst parseString = (string) => {\n    return string.split(/[ ,]+/);  \n}\n\nexport default function OptionCard(props) {\n\n    let CuisineArray = parseString(props.value.cuisines[0].name)\n    let CuisineItems = CuisineArray.map((cuisineItem) => {\n        return (\n            <li>\n                {cuisineItem}\n            </li>\n        )\n    })\n    \n    return (\n        <div class=\"place-card\">\n            <div className=\"restaurant-name\">{props.value.name}</div>\n            <div className=\"location\">{props.value.zipcode}</div>\n            <div class=\"flexible\"><ul className=\"cuisine-list\"> {CuisineItems} </ul></div>\n        </div>\n    )\n}","import { useState, useEffect } from \"react\"\nimport OptionCard from '../Components/OptionCard'\n\nimport './OptionDisplay.css'\n\n// Functions\nfunction getRandomElement(items) {\n    return items[Math.floor(Math.random()*items.length)]\n}\n\nconst OptionDisplay = (props) => {\n\n    // States\n    const [options, setOptions] = useState([]);\n\n    // Functions\n    function GenerateOptions() {\n\n        let limit = 1;\n        let myOptions = [];\n        function populateOptions() {\n            let randomElement = getRandomElement(props.currentRestaurants);\n            if (myOptions.indexOf(randomElement) === -1) {\n                myOptions.push(randomElement);\n                populateOptions();\n            } \n            else {\n                if (myOptions.length < limit) {\n                    populateOptions();\n                } else {\n                    if (myOptions.length > limit) {myOptions.pop()}\n                    return myOptions\n                }  \n            }\n\n            return myOptions\n        }\n\n        populateOptions();\n\n        return myOptions\n    }\n\n    function refreshOptions() {\n\n        let myOptions = GenerateOptions();\n        while (myOptions.length > 1) {\n            myOptions.pop()\n        }\n        setOptions(myOptions);\n    }\n\n\n    useEffect(() => {\n\n\n        let myOptions = GenerateOptions();\n        setOptions(myOptions);\n        \n    }, [])\n\n    const restaurantOptionMap = options.map((value) => {\n\n        return(\n            <OptionCard value={value} />\n        )\n    })\n\n    return (\n        <div>\n            <div class=\"place-card__wrap--outer\">\n                <div class=\"place-card__wrap--inner\">\n                    {restaurantOptionMap}\n                </div>\n            </div>\n\n            <button onClick={refreshOptions} className='submit-button submit'>Refresh</button>\n        </div>\n    )\n}\n\n\nexport default OptionDisplay","// React\nimport { useState } from 'react'\n\n// Zooms\nimport Fade from 'react-reveal/Zoom';\n\n// Styling\nimport './Button.css';\n\nexport default function Button(props) {\n\n    // States\n    const [reveal, setReveal] = useState(true)\n\n    // Functions\n    function hideButton (e) {\n\n        // Hiding the button\n        // setReveal(false)\n\n        // Getting button while removing whitespaces\n        props.triggerRemove(e.target.innerHTML.replace(/\\s/g, ''))\n    }\n\n    return (\n        <Fade opposite when={reveal} duration={500}>\n            <button onClick={hideButton} className=\"category-button\"> {props.context} </button>\n        </Fade>\n    )\n}","// React\nimport {useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\n\n// Styling\nimport './Categories.css'\n\n// Components\nimport CategoryButton from '../Components/Button'\n\n// Functions\nfunction removeItemFromArray(arr, value) {\n    let i = 0;\n    while (i < arr.length) {\n      if (arr[i] === value) {\n        arr.splice(i, 1);\n      } else {\n        ++i;\n      }\n    }\n    return arr;\n  }\n\nfunction foundDuplicate(Arr, InitialItem) {\n        \n  for (let i = 0; i < Arr.length; i++) {\n      let item = Arr[i]\n      if (InitialItem === item) {\n          return true\n      }\n  }\n  return false\n}\n\nconst parseString = (string) => {\n  return string.split(/[ ,]+/);  \n}\n\nexport default function Categories(props) {\n\n    //Cat\n\n    // States\n    const [display, setDisplay] = useState()\n    const [categories, setCategories] = useState([])\n\n    // Initial Loading Display\n    let myArray = props.generateCategories()\n\n    useEffect(() => {\n        props.getRestaurants()\n\n        setDisplay(\n\n            // Mapping out the generated categories and creating a button per category on page load\n            props.generateCategories().map((item, index) => {\n                return (\n                  <CategoryButton \n                  triggerRemove={triggerRemove}\n                  context={item}\n                  />\n                )\n            })\n\n        )\n\n        setCategories(props.generateCategories())\n        \n    }, [])\n\n    // Functions\n    function getRestaurantById(Id) {\n\n      let restaurantData = props.restaurantData\n\n      for (let i = 0; i < restaurantData.length; i++) {\n        if (restaurantData[i]._id === Id) {\n          return restaurantData[i]\n        }\n      }\n\n\n    }\n\n    function triggerRemove(value) {\n\n        // Removing the clicked category from the arrays\n        myArray = removeItemFromArray(myArray, value)\n        \n\n        // Mapping\n        // Creating li's from the finalized table with all duplicates removed\n        let myCategories =  myArray.map((item, index) => {\n            return (\n              <CategoryButton \n              triggerRemove={triggerRemove}\n              context={item}\n              />\n            )\n        })\n\n        setDisplay(myCategories)\n        setCategories(myArray)\n    }\n\n    function queryRestaurants(targetCuisineItem) {\n      // initialize an array \n      let queryResults = []\n\n      // loop through the restaurants to check on whether the `targetCuisineItem` is within the restaurant's cuisine list\n      props.restaurantData.forEach((restaurant) => {\n\n        // convert cuisine list to a table *subject to change*\n        let cuisineList = parseString(restaurant.cuisines[0].name)\n        \n        // cuisine list loop through\n        for (let i = 0; i < cuisineList.length; i++) {\n          // setting the current cuisine as a variable\n          let currentCuisineItem = cuisineList[i]\n\n          // if the current cuisine ^ is the same as the cuisine we're searching for\n          if (currentCuisineItem === targetCuisineItem) {\n\n            if (queryResults.indexOf(restaurant._id) === -1) {\n              queryResults.push(restaurant._id)\n            }\n          }\n        }\n\n      })\n\n\n      return queryResults\n    }\n\n    function compileChoices() {\n\n      // Creating an array to store all the ids\n      let restaurantQuery = []\n      // Creating a queried array for finalized restaurant list\n      let queriedRestaurants = []\n\n      // Looping through each nondeleted categories\n      categories.forEach((targetCuisine) => {\n        // searching through the restaurants' cuisines to check for matches with the target cuisine\n        queryRestaurants(targetCuisine).forEach((id) => {\n          // only push the restaurant id if it is not already in the list\n          if (restaurantQuery.indexOf(id) === -1) {\n            restaurantQuery.push(id)\n          }\n        })\n      })\n\n      restaurantQuery.forEach((Id) => {\n        // query through the restaurants to get them by id\n        queriedRestaurants.push(getRestaurantById(Id))\n      })\n\n      console.log(queriedRestaurants)\n      props.setCurrentRestaurants(queriedRestaurants)\n    }\n\n    \n    \n\n    return (\n        <div>\n          <h3>click what you don't want and hit submit.</h3>\n          <div className=\"categories\">\n            {display}\n          </div>\n          <Link to=\"/options\" > \n          <button onClick={compileChoices} className=\"submit-button submit\">\n            Submit\n          </button>\n          </Link>\n        </div>\n    )\n\n}","// React\nimport { useState, useEffect } from \"react\"\n\n// Styling\nimport './PlaceCard.css'\n\n// Functions\nconst parseString = (string) => {\n    if(!string){\n        return []\n    }else{\n    return string.split(/[ ,]+/);  \n    }\n}\n\n// Component\nconst PlaceCard = (props) => {\n\n    // States\n    const [ updating, setUpdating] = useState(false) \n    const [info, setInfo] = useState({ name: \"\", zipcode: \"\"})\n    const [cuisines, setCuisines] = useState('')\n    const id = props.value._id\n    \n\n    // Functions\n    const update = () => {\n        setUpdating(!updating) //setting the ternary boolean\n    }\n\n    const finalizeUpdate = async (e) => {\n        e.preventDefault()\n\n        let infoNew = {name: info.name, zipcode: info.zipcode, cuisines: [{name: cuisines}]}\n\n        update() // for setting the ternary boolean\n        props.handleUpdate() // just console logs 'updated'\n        props.putRestaurant(id, infoNew) // sending post request\n    }\n    \n\n    const handleEdit = (e) => {\n        const value = e.target.value\n        const name = e.target.name\n        const copy = Object.assign({}, info)\n        copy[name] = value\n        setInfo(copy)\n    }\n\n    // Setting Cuisine Changes\n    const handleCuisineChange = (e) => {\n        const value = e.target.value\n        const foodArray = parseString(value)\n        console.log(value)\n        if (value !== \"\" || value !== \" \") {setCuisines(value)}\n    }\n\n    let CuisineArray = parseString(props.value.cuisines[0].name)\n    let CuisineItems = CuisineArray.map((cuisineItem) => {\n        return (\n            <li>\n                {cuisineItem}\n            </li>\n        )\n    })\n\n    useEffect(() => {\n        setInfo({name: props.value.name, zipcode: props.value.zipcode})\n        setCuisines(props.value.cuisines[0].name)\n    }, [])\n\n\n    return (\n        \n        <div class=\"place-card\">\n            <p className=\"hide-me\">{props.value._id}</p>\n            {updating ? \n            <form onSubmit={finalizeUpdate}>\n                <input className=\"place-card-input-field\" onChange={handleEdit} name=\"name\" value={info.name} type=\"text\" placeholder=\"Restaurant\" />\n                <input className=\"place-card-input-field\" onChange={handleEdit} name=\"zipcode\" value={info.zipcode} type=\"text\" placeholder=\"Location\" />\n                <input className=\"place-card-input-field\" onChange={handleCuisineChange} name=\"cuisines\" value={cuisines} type=\"text\"  placeholder=\"Cuisines\"/>\n                <button type=\"submit\">Save</button>\n            </form> : \n            ''\n            }\n            {!updating ? <div className=\"restaurant-name\">{props.value.name}</div> : ''}\n            {!updating ? <div className=\"location\">{props.value.zipcode}</div> : ''}\n            {!updating ? <div className=\"flexible\"><ul className=\"cuisine-list\">{CuisineItems} </ul></div> : <div class=\"flexible\"></div>}\n            <div>{updating ? \"\" : <button className=\"update-button\" onClick={update}>Update</button>} <button onClick={props.handleDelete}>Delete</button></div>\n        </div>\n\n\n    )\n}   \nexport default PlaceCard","import { useState, useEffect } from \"react\"\nimport PlaceCard from \"./Components/PlaceCard\"\n\nconst RestaurantDisplay = (props) => {\n\n    const handleDelete = async (event) => {\n        let selectedRestaurant = event.target.parentNode.parentNode.children[0].innerHTML // get restaurant id\n        selectedRestaurant = selectedRestaurant.replace(/ /g, \" \") // check for spaces\n        props.deleteRestaurant(selectedRestaurant) // delete restaurant\n    }\n\n    const handleUpdate = () => {\n        console.log('updated')\n    }\n\n\n    const restaurantMap = props.restaurantData.map((value) => {\n\n        return(\n            <PlaceCard getRestaurants={props.getRestaurants} putRestaurant={props.putRestaurant} value={value} handleDelete={handleDelete} handleUpdate={handleUpdate}/>\n        )\n    })\n\n    useEffect(() => {\n        props.getRestaurants()\n    }, [])\n\n    return(\n        <>\n        <h3>Here are your favorites.  Feel free to make any changes.</h3>\n        <div class=\"place-card__wrap--outer\">\n                <div class=\"place-card__wrap--inner\">\n                    {restaurantMap}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default RestaurantDisplay","import RestaurantDisplay from \"../RestaurantDisplay\"\n\nconst About = (props) => {\n    return (\n        <>\n        <RestaurantDisplay \n            restaurantData={props.restaurantData} \n            setRestaurantData={props.setRestaurantData} \n            getRestaurants={props.getRestaurants}\n            putRestaurant={props.putRestaurant}\n            deleteRestaurant={props.deleteRestaurant}\n            />\n        </>\n    )\n}\n\nexport default About","// React\nimport React, { useState } from 'react'\n\nimport './RestaurantForm.css'\n\n// Functions\nconst parseString = (string) => {\n    return string.split(/[ ,]+/);  \n  }\n\nconst RestaurantForm = (props) => {\n\n    // States\n    const [place, setPlace] = useState({ name: \"\", zipcode: \"\"})\n    const [cuisines, setCuisines] = useState('')\n\n    // Functions\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        // creating an info object to post to the database\n        let info = {name: place.name, zipcode: place.zipcode, cuisines: [{name: cuisines}]}\n        \n        // checking if input fields are blank\n        if (cuisines !== '' && place.name !== '' && place.zipcode !== '') {\n            props.postRestaurant(info, setPlace)\n            setCuisines('')\n        }\n    }\n\n     // handling the input changes\n    const handleChange = (e) => {\n        const value = e.target.value\n        const name = e.target.name\n        const copy = Object.assign({}, place)\n\n        copy[name] = value\n\n        setPlace(copy)\n    }\n\n    // Setting Cuisine Changes\n    const handleCuisineChange = (e) => {\n        const value = e.target.value\n        const foodArray = parseString(value)\n        setCuisines(value)\n    }\n\n    return (\n    <div className=\"restaurant-container\">\n        <div className=\"restaurant-form\">\n            <form onSubmit={handleSubmit}>\n                <input className=\"input-field\" onChange={handleChange} type=\"text\" name=\"name\" placeholder=\"Restaurant\" value={place.name}/>\n                <input className=\"input-field\" onChange={handleChange} type=\"text\" name=\"zipcode\" placeholder=\"Location\" value={place.zipcode}/>\n                <input className=\"input-field\" onChange={handleCuisineChange} type=\"text\" name=\"cuisines\" placeholder=\"Cuisines\" value={cuisines}/>\n                <button className=\"submit-button\" type=\"submit\">Submit</button>\n            </form>\n        </div>\n    </div>\n    )\n\n}\n\nexport default RestaurantForm","import RestaurantForm from \"./Pages/RestaurantForm\"\n\nconst Home = (props) => {\n    return (\n        <>\n        <h3>Tell us about your favorite restaurant </h3>\n        \n            <RestaurantForm \n            restaurantData={props.restaurantData} \n            setRestaurantData={props.setRestaurantData} \n            getRestaurants={props.getRestaurants}\n            postRestaurant={props.postRestaurant}\n            />\n    \n        </>\n    )\n}\n\nexport default Home","export default __webpack_public_path__ + \"static/media/DV.e9e729a2.jpeg\";","export default __webpack_public_path__ + \"static/media/TF.75b22981.jpg\";","export default __webpack_public_path__ + \"static/media/TR.fcad464e.jpg\";","export default __webpack_public_path__ + \"static/media/MS.5a106654.jpg\";","import React from \"react\";\nimport DV from \"./Photos/DV.jpeg\";\nimport TF from \"./Photos/TF.jpg\";\nimport TR from \"./Photos/TR.jpg\";\nimport MS from \"./Photos/MS.jpg\";\nimport \"./TeamPage.css\";\n\nfunction TeamPage (){\n    return(\n        <>\n        <h2>Developer Team</h2>\n        <div className=\"team-container\">\n            <div className=\"team-card\">\n            <img src={TF} alt=\"pic\" />\n            <h2>Tiffany Fong</h2>\n            <ul>\n                <h3>Passions</h3>\n                <li> Cardio  </li>\n                <li>Cooking</li>\n                <h3>Contribution</h3>\n                <li>Back-End</li>\n                <li>Concept</li>\n            </ul>\n            </div>\n\n            <div className=\"team-card\">\n            <img src={MS} alt=\"pic\" />\n            <h2>Marco Silva</h2>\n            <ul>\n                <h3>Passions</h3>\n                <li>Motorcycles</li>\n                <li>Crypto</li>\n                <h3>Contribution</h3>\n                <li>Front-End Structure</li>\n            </ul>\n            </div>\n\n            <div className=\"team-card\">\n            <img src={DV} alt=\"pic\" />\n            <h2>Diana Villada</h2>\n            <ul>\n                <h3>Passions</h3>\n                <li>Yoga</li>\n                <li>Traveling</li>\n                <h3>Contribution</h3>\n                <li>CSS Styling</li>\n                <li>Front-End Components</li>\n            </ul>\n            </div>\n\n            <div className=\"team-card\">\n            <img src={TR} alt=\"pic\" />\n            <h2>Trendon Robinson</h2>\n            <ul>\n                <h3>Passions</h3>\n                <li>Programming</li>\n                <li>Reading</li>\n                <h3>Contribution</h3>\n                <li>Front-End Functionality</li>\n            </ul>\n            </div>\n\n        </div>\n        </>\n\n    )\n\n\n\n\n}\n\nexport default TeamPage;","let apiUrl\nconst apiUrls = {\n  // your production api url\n  production: 'https://immense-badlands-54158.herokuapp.com',\n  // your development api url\n  development: 'http://localhost:4000'\n}\n\n// check if development or production\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\n// export api url\nexport default apiUrl","// Styling\nimport './App.css';\n\n// React imports\nimport { useState } from 'react';\nimport { Routes, Route, Link } from 'react-router-dom'\n\n// Components\nimport OptionDisplay from './Pages/OptionDisplay';\nimport Categories from './Pages/Categories';\nimport About from './Pages/About';\nimport Home from './Home';\nimport TeamPage from './Team/TeamPage';\nimport apiUrl from './apiConfig';\n\n//icons\nimport { FaClone, FaHeart, FaHome } from \"react-icons/fa\";\nimport {IoPeopleSharp} from \"react-icons/io5\";\n\n\n// Functions\nfunction foundDuplicate(Arr, InitialItem) {\n        \n  for (let i = 0; i < Arr.length; i++) {\n      let item = Arr[i]\n      if (InitialItem === item) {\n          return true\n      }\n  }\n  return false\n}\n\nconst parseString = (string) => {\n  return string.split(/[ ,]+/);  \n}\n\nfunction App() {\n\n  // States\n  const [restaurantData, setRestaurantData] = useState([])\n  const [currentRestaurants, setCurrentRestaurants] = useState()\n\n  // Functions\n  // const generateCategories = () => {\n  //   // getRestaurants()\n  //   let mergedCuisines = []\n  //   let finalizedCuisineArray = []\n\n  //   // Looping through all the restaurants to merge the cuisine all into one array\n  //   restaurantData.forEach((restaurant) => {\n  //       // Getting the cuisine key from the restaurant object\n  //       let cuisineItems = parseString(restaurant.cuisines[0].name)\n  //       mergedCuisines = [...mergedCuisines, ...cuisineItems]\n  //   })\n\n  //   // Stripping the merged arrays from duplicate cuisines\n  //   mergedCuisines.forEach((item, index) => {\n  //     if (!foundDuplicate(finalizedCuisineArray, item)) {finalizedCuisineArray.push(item)}\n  //   })\n\n  //   return finalizedCuisineArray\n  // }\n\n  // Functions\n  const generateCategories = () => {\n    // getRestaurants()\n    let mergedCuisines = []\n    let finalizedCuisineArray = []\n\n    // Looping through all the restaurants to merge the cuisine all into one array\n    restaurantData.forEach((restaurant) => {\n        let cuisineItems = parseString(restaurant.cuisines[0].name)\n        mergedCuisines = [...mergedCuisines, ...cuisineItems]\n    })\n\n    // Stripping the merged arrays from duplicate cuisines\n    mergedCuisines.forEach((item, index) => {\n      if (!foundDuplicate(finalizedCuisineArray, item)) {finalizedCuisineArray.push(item)}\n    })\n\n    // Creating li's from the finalized table with all duplicates removed\n    let duplicatesRemoved = finalizedCuisineArray.map((item, index) => {\n      return (\n        <li>{item}</li>\n      )\n    })\n\n    return duplicatesRemoved\n  }\n\n  // CRUD\n  const getRestaurants = () => {\n    fetch(`${apiUrl}/restaurants`, {\n        method: 'GET'}\n        )\n        .then((res) => res.json())\n        .then((data) => {setRestaurantData(data)})\n  }\n\n  const postRestaurant = (restaurant, setPlace) => {\n    fetch(`${apiUrl}/restaurants`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(restaurant)\n        })\n        .then(response => response.json())\n        .then(data => setPlace({ name: \"\", zipcode: \"\"}))\n        .then(data => {getRestaurants()})\n        \n  }\n\n  const putRestaurant = (id, info) => {\n    fetch(`${apiUrl}/restaurants/${id}`, {\n            method: 'PUT',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(info)\n        })\n        .then(data => {getRestaurants()})\n  }\n\n  \n  const deleteRestaurant = (restaurant) => {\n    fetch(`${apiUrl}/restaurants/${restaurant}`, {\n            method: 'DELETE',\n        })\n        .then(data => {getRestaurants()})\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Not That</h1>\n      <nav>\n        <ul className=\"navbar\">\n         \n          <li><Link to=\"/\" ><FaHome/></Link></li>\n          <li><Link to=\"/favorites\" ><FaHeart/></Link></li>\n          <li><Link to=\"/categories\"><FaClone /></Link> </li>\n          <li><Link to=\"/team\"><IoPeopleSharp /></Link> </li>\n          \n        </ul>\n      </nav>\n      \n      <Routes>\n        {/* Home */}\n        <Route path=\"/\"element={<Home \n        restaurantData={restaurantData} \n        setRestaurantData={setRestaurantData} \n        // CRUD Methods\n        getRestaurants={getRestaurants} \n        postRestaurant={postRestaurant} \n        />}/>\n\n          {/* Favorites */}\n        <Route exact path=\"/favorites\" element={<About\n        restaurantData={restaurantData} \n        setRestaurantData={setRestaurantData} \n        // CRUD Methods\n        getRestaurants={getRestaurants} \n        postRestaurant={postRestaurant} \n        putRestaurant={putRestaurant}\n        deleteRestaurant={deleteRestaurant}\n        />}/>\n\n        {/* Categories */}\n        <Route exact path=\"/categories\" element={<Categories\n        getRestaurants={getRestaurants} \n        restaurantData={restaurantData}\n        foundDuplicate={foundDuplicate}\n        generateCategories={generateCategories}\n        setCurrentRestaurants={setCurrentRestaurants}\n        />}/>\n\n        {/* Team*/}\n        <Route exact path=\"/team\" element={<TeamPage\n        />}/>\n\n        <Route exact path=\"/options\" element={<OptionDisplay\n        currentRestaurants={currentRestaurants}\n        />}/>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n    <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}